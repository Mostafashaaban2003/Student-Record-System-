/*
 "رَبَّنَا لاَ تُؤَاخِذْنَا إِن نَّسِينَا أَوْ أَخْطَأْنَا
رَبَّنَا وَلاَ تَحْمِلْ عَلَيْنَا إِصْرًا كَمَا حَمَلْتَهُ عَلَى الَّذِينَ مِن قَبْلِنَا
رَبَّنَا وَلاَ تُحَمِّلْنَا مَا لاَ طَاقَةَ لَنَا بِهِ وَاعْفُ عَنَّا وَاغْفِرْ لَنَا وَارْحَمْنَآ
أَنتَ مَوْلاَنَا فَانصُرْنَا عَلَى الْقَوْمِ الْكَافِرِينَ"
*/
#define _CRT_SECURE_NO_DEPRECATE
#include <bits/stdc++.h>


using namespace std;

void fileIO(void) {

#ifndef ONLINE_JUDGE

    freopen("input.txt", "r", stdin);
    freopen("output.txt", "w", stdout);

#endif


#ifdef ONLINE_JUDGE
    //freopen("", "r", stdin);
#endif

}

void fastIO(void) {

    ios_base::sync_with_stdio(false);
    cin.tie(NULL);
    cout.tie(NULL);

}

typedef long long ll;
typedef unsigned long long ull;
typedef long double ld;

typedef pair<int, int> pii;
typedef pair<int, pii> piii;

typedef pair<ll, ll> pll;
typedef pair<ll, pll> plll;

typedef pair<ll, ld> pld;
typedef pair<double, pii> pdii;

typedef vector<int> vi;
typedef vector<pii> vii;
typedef vector<piii> viii;

typedef vector<ll> vl;
typedef vector<pll> vll;
typedef vector<plll> vlll;

typedef vector<string> vs;
typedef vector<bool> vb;

typedef vector<vl> vvl;

typedef priority_queue<int> pq;
typedef priority_queue<int, vector<int>, greater<int>> pqr;

#define loop(n)          for(int i = 0; i < (n); i++)
#define lp(x, s, e)      for(int x = (s); x < (e); x++)
#define lpe(x, s, e)     for(int x = (s); x <= (e); x++)

#define MP make_pair
#define PB push_back
#define len(s)   (int)s.length()
#define sz(v)    (int)v.size()
#define all(a)   a.begin(),a.end()
#define all_r(a)   a.rbegin(),a.rend()
#define clr(x, val)    memset((x), (val), sizeof(x))

#define tests int t; cin >> t; int i = 0; while(i++ < t)
#define SetPre(n, x)  cout << fixed << setprecision(n) << x

#define endl '\n'
#define kill return 0


int main()
{
    fastIO(); fileIO();
    tests{
        int n, k, x; cin >> n >> k;
        pqr pq;
        map<int,int> freq;
        loop(n){
            cin >> x;
            freq[x]++;
            pq.push(x);
        }
        ll mxstrike = 0;
        ll strike = 0;
        int first = pq.top();
        while(!pq.empty()){
            int q;
            if(freq[pq.top()] >= k){
                if(pq.top() - first == 1){
                    strike++;
                    if(strike > mxstrike){
                        mxstrike = strike;

                    }
                }
                q =
            }
            else{
                strike = 0;
                
                q = freq[pq.top()];
            }
            loop(q) pq.pop();
        }

    };
}
